generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @default(now()) @updatedAt @map("updated_at")
  displayName String?       @map("display_name")
  shortName   String?       @map("short_name")
  SkillOnUser SkillOnUser[]

  @@map("user")
}

model Skill {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  title       String
  SkillOnUser SkillOnUser[]

  @@map("skill")
}

model SkillOnUser {
  user    User   @relation(fields: [userId], references: [id])
  userId  String @map("user_id")
  skill   Skill  @relation(fields: [skillId], references: [id])
  skillId String @map("skill_id") @db.Uuid

  @@id([userId, skillId])
  @@map("skill_on_user")
}

model Voter {
  id        String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  dao        Dao    @relation(fields: [daoId], references: [id])
  daoId      String @map("dao_id")
  votesCount Int    @default(0) @map("votes_count")

  @@id([id, daoId])
  @@index([id], type: Hash)
  @@map("voter")
}

model Member {
  id        String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  dao   Dao    @relation(fields: [daoId], references: [id])
  daoId String @map("dao_id")

  @@id([id, daoId])
  @@index([id], type: Hash)
  @@map("member")
}

model Dao {
  id        String   @id
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  displayName      String    @map("display_name")
  symbol           String    @map("symbol")
  programId        String    @map("program_id")
  communityTokenId String    @map("community_token_id")
  nftTokenId       String?   @map("nft_token_id")
  proposalsCount   Int       @default(0) @map("proposals_count")
  votersCount      Int       @default(0) @map("voters_count")
  votesCount       Int       @default(0) @map("votes_count")
  firstVotingAt    DateTime? @map("first_voting_at")
  website          String?   @map("website")
  twitter          String?   @map("twitter")
  logoUrl          String?   @map("logo_url")

  voter  Voter[]
  member Member[]

  @@map("dao")
}

model Deployer {
  id        String   @id
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("deployer")
}

model Job {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  organizationName String   @map("organization_name")
  title            String   @map("title")
  salary           String?  @map("salary")
  location         String?  @map("location")
  tags             String[] @map("tags")
  descriptionUrl   String   @map("description_url")
  logoBase64       String?  @map("logo_base64")
  isRemote         Boolean  @map("is_remote")

  @@index([tags], type: Gin)
  @@map("job")
}

model NftBuildspace {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  tokenId     Int    @map("token_id")
  ownerEthId  String @map("owner_eth_id")
  title       String @map("title")
  description String @map("description")
  mediaUrl    String @map("media_url")
  courseTitle String @map("course_title")

  @@index([ownerEthId], type: Hash)
  @@map("nft_buildspace")
}

model NftDeveloperDao {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  tokenId      Int    @map("token_id")
  ownerEthId   String @map("owner_eth_id")
  title        String @map("title")
  description  String @map("description")
  image_base64 String @map("image_base64")

  @@index([ownerEthId], type: Hash)
  @@map("nft_developer_dao")
}
